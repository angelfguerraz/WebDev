## Vue-ROUTER ##

in project: npm i -S vue-router

1. Create in src (@) a file router.js
2. !! import this file in main.js (import router from '@/router')
3. Router Structure:
	import Vue from 'vue'
	import Router from "vue-router"

	import __components__

	Vue.use(Router)

	export default new Router({
		mode: "history",
		
		// Array with the Paths
		routes: [
			{
			 path: "/",
			 name: "home",
			 component: Home
			}
		]
	})
!!! Vue router hast the tag <router-link to="_path-to-go_"> to navigate between views


## Single Page Apps ##

All components are built on the same structure:
--
<template>
	__html-content__
	!! All imported components MUST be used for webpage to work !!
	<px-header></px-header>
	<px-assets-tables></px-assets-tables>
</template>

<script>
	import {component--name} from "@/PATH"
	import PxHeader from "@/components/PxHeader"

	export default{
		name: "__Comp-name__"
		name: "App",
		components: {
		  __Componnets that this Components uses__
		  PxHeader,
		  PxAssetsTable
		},
		computed:{},
		methods:{}
	}
</script>




## VUE ##
Link Vue:
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>

Communication Parent-Child:
props: [...]

Communication Child-Parent:
this.$emit('event_name')

<modal v-on:event_name="function2call">

templates: 
<slot name="slots_name"></slot>

-- Vue Component:
Vue.component('comp_name',{
	data(){...},
	methods:{...},
	template:`html_code for component`
})

new Vue({
	el:'#app',
	data(){return {...}},
	computed: {...},
	watch: {...},
	methods:{...}
})

!! All directives are straight conected with the Vue-Data
-- Dynamic attributes (Tag Properties):
v-bind: Binds Data-Object with DOM-Tag-Attributes in html

v-bind:class="{
	...Changes the Element-Class depending on Conditions ...
}"

!! v-if eliminates the element from the DOM
v-if: Displays if a condition is met
v-if-else: ...
v-else: No value needed

!! v-show only affects the display property
v-show: displays if a condition is met

v-for: works as a standard for-loop
v-bind:key : avoids losing the reference list in case of updates
Syntax:
v-for="(n,i) in array" v-bind:key="n"

v-on:__event__ : Event Handling. Function is executed when Event occurs.
Syntax
v-on:click="to_call_function"

v-model: Allows 2-way-data-binding
Syntax:
v-model="__property__"
--

